import { Config } from 'gridjs';
import { GridEvents } from 'gridjs/dist/src/events';
import { EventEmitter } from '@angular/core';
import 'preact';
import * as i0 from "@angular/core";
type GridEventsEmitter = Record<keyof GridEvents, EventEmitter<any>>;
export declare const GRID_EVENTS: Array<keyof GridEvents>;
export declare abstract class GridJsAngularBindingBase implements GridEventsEmitter {
    constructor();
    readonly instance: import("@angular/core").WritableSignal<import("gridjs/dist/src/grid").default | undefined>;
    set _instance(value: Config['instance'] | undefined);
    readonly store: import("@angular/core").WritableSignal<import("gridjs/dist/src/state/store").Store<Record<string, unknown>> | undefined>;
    set _store(value: Config['store'] | undefined);
    readonly eventEmitter: import("@angular/core").WritableSignal<import("gridjs/dist/src/util/eventEmitter").EventEmitter<GridEvents> | undefined>;
    set _eventEmitter(value: Config['eventEmitter'] | undefined);
    readonly plugin: import("@angular/core").WritableSignal<import("gridjs/dist/src/plugin").PluginManager | undefined>;
    set _plugin(value: Config['plugin'] | undefined);
    readonly container: import("@angular/core").WritableSignal<Element | undefined>;
    set _container(value: Config['container'] | undefined);
    readonly tableRef: import("@angular/core").WritableSignal<import("preact").RefObject<HTMLTableElement> | undefined>;
    set _tableRef(value: Config['tableRef'] | undefined);
    readonly data: import("@angular/core").WritableSignal<import("gridjs/dist/src/types").TData | (() => import("gridjs/dist/src/types").TData) | (() => Promise<import("gridjs/dist/src/types").TData>) | undefined>;
    set _data(value: Config['data'] | undefined);
    readonly server: import("@angular/core").WritableSignal<import("gridjs/dist/src/storage/server").ServerStorageOptions | undefined>;
    set _server(value: Config['server'] | undefined);
    readonly header: import("@angular/core").WritableSignal<import("gridjs/dist/src/header").default | undefined>;
    set _header(value: Config['header'] | undefined);
    readonly from: import("@angular/core").WritableSignal<HTMLElement | undefined>;
    set _from(value: Config['from'] | undefined);
    readonly storage: import("@angular/core").WritableSignal<import("gridjs/dist/src/storage/storage").default<any> | undefined>;
    set _storage(value: Config['storage'] | undefined);
    readonly processingThrottleMs: import("@angular/core").WritableSignal<number | undefined>;
    set _processingThrottleMs(value: Config['processingThrottleMs'] | undefined);
    readonly pipeline: import("@angular/core").WritableSignal<import("gridjs/dist/src/pipeline/pipeline").default<import("gridjs/dist/src/tabular").default> | undefined>;
    set _pipeline(value: Config['pipeline'] | undefined);
    readonly autoWidth: import("@angular/core").WritableSignal<boolean | undefined>;
    set _autoWidth(value: Config['autoWidth'] | undefined);
    readonly width: import("@angular/core").WritableSignal<string | undefined>;
    set _width(value: Config['width'] | undefined);
    readonly height: import("@angular/core").WritableSignal<string | undefined>;
    set _height(value: Config['height'] | undefined);
    readonly pagination: import("@angular/core").WritableSignal<boolean | import("gridjs/dist/src/view/plugin/pagination").PaginationConfig | undefined>;
    set _pagination(value: Config['pagination'] | undefined);
    readonly sort: import("@angular/core").WritableSignal<boolean | import("gridjs/dist/src/view/plugin/sort/sort").GenericSortConfig | undefined>;
    set _sort(value: Config['sort'] | undefined);
    readonly translator: import("@angular/core").WritableSignal<import("gridjs/dist/src/i18n/language").Translator | undefined>;
    set _translator(value: Config['translator'] | undefined);
    readonly fixedHeader: import("@angular/core").WritableSignal<boolean | undefined>;
    set _fixedHeader(value: Config['fixedHeader'] | undefined);
    readonly resizable: import("@angular/core").WritableSignal<boolean | undefined>;
    set _resizable(value: Config['resizable'] | undefined);
    readonly columns: import("@angular/core").WritableSignal<import("gridjs/dist/src/types").OneDArray<import("preact").ComponentChild | import("gridjs/dist/src/types").TColumn> | undefined>;
    set _columns(value: Config['columns'] | undefined);
    readonly search: import("@angular/core").WritableSignal<boolean | import("gridjs/dist/src/view/plugin/search/search").SearchConfig | undefined>;
    set _search(value: Config['search'] | undefined);
    readonly language: import("@angular/core").WritableSignal<import("gridjs/dist/src/i18n/language").Language | undefined>;
    set _language(value: Config['language'] | undefined);
    readonly plugins: import("@angular/core").WritableSignal<import("gridjs/dist/src/plugin").Plugin<any>[] | undefined>;
    set _plugins(value: Config['plugins'] | undefined);
    readonly style: import("@angular/core").WritableSignal<Partial<{
        table: import("gridjs/dist/src/types").CSSDeclaration;
        td: import("gridjs/dist/src/types").CSSDeclaration;
        th: import("gridjs/dist/src/types").CSSDeclaration;
        container: import("gridjs/dist/src/types").CSSDeclaration;
        header: import("gridjs/dist/src/types").CSSDeclaration;
        footer: import("gridjs/dist/src/types").CSSDeclaration;
    }> | undefined>;
    set _style(value: Config['style'] | undefined);
    readonly className: import("@angular/core").WritableSignal<Partial<{
        table: string;
        th: string;
        thead: string;
        tbody: string;
        tr: string;
        td: string;
        container: string;
        footer: string;
        header: string;
        search: string;
        sort: string;
        pagination: string;
        paginationSummary: string;
        paginationButton: string;
        paginationButtonNext: string;
        paginationButtonCurrent: string;
        paginationButtonPrev: string;
        loading: string;
        notfound: string;
        error: string;
    }> | undefined>;
    set _className(value: Config['className'] | undefined);
    readonly gridConfig: import("@angular/core").WritableSignal<Partial<Config> | undefined>;
    set _gridConfig(value: Partial<Config> | undefined);
    readonly config: import("@angular/core").Signal<Partial<Config>>;
    readonly beforeLoad: EventEmitter<any>;
    readonly load: EventEmitter<any>;
    readonly ready: EventEmitter<any>;
    readonly cellClick: EventEmitter<any>;
    readonly rowClick: EventEmitter<any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<GridJsAngularBindingBase, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GridJsAngularBindingBase, "ng-component", never, { "_instance": { "alias": "instance"; "required": false; }; "_store": { "alias": "store"; "required": false; }; "_eventEmitter": { "alias": "eventEmitter"; "required": false; }; "_plugin": { "alias": "plugin"; "required": false; }; "_container": { "alias": "container"; "required": false; }; "_tableRef": { "alias": "tableRef"; "required": false; }; "_data": { "alias": "data"; "required": false; }; "_server": { "alias": "server"; "required": false; }; "_header": { "alias": "header"; "required": false; }; "_from": { "alias": "from"; "required": false; }; "_storage": { "alias": "storage"; "required": false; }; "_processingThrottleMs": { "alias": "processingThrottleMs"; "required": false; }; "_pipeline": { "alias": "pipeline"; "required": false; }; "_autoWidth": { "alias": "autoWidth"; "required": false; }; "_width": { "alias": "width"; "required": false; }; "_height": { "alias": "height"; "required": false; }; "_pagination": { "alias": "pagination"; "required": false; }; "_sort": { "alias": "sort"; "required": false; }; "_translator": { "alias": "translator"; "required": false; }; "_fixedHeader": { "alias": "fixedHeader"; "required": false; }; "_resizable": { "alias": "resizable"; "required": false; }; "_columns": { "alias": "columns"; "required": false; }; "_search": { "alias": "search"; "required": false; }; "_language": { "alias": "language"; "required": false; }; "_plugins": { "alias": "plugins"; "required": false; }; "_style": { "alias": "style"; "required": false; }; "_className": { "alias": "className"; "required": false; }; "_gridConfig": { "alias": "gridConfig"; "required": false; }; }, { "beforeLoad": "beforeLoad"; "load": "load"; "ready": "ready"; "cellClick": "cellClick"; "rowClick": "rowClick"; }, never, never, false, never>;
}
export {};
